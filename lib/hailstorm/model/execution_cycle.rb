#
# ExecutionCycle model
# @author Sayantam Dey

require 'erubis/engine/eruby'
require 'zip/zipfilesystem'

require 'hailstorm/model'
require 'hailstorm/model/project'
require 'hailstorm/model/master_agent'
require 'hailstorm/model/client_stat'
require 'hailstorm/model/target_stat'
require 'hailstorm/support/report_builder'

class Hailstorm::Model::ExecutionCycle < ActiveRecord::Base
  
  belongs_to :project

  has_many :client_stats, :dependent => :destroy
  
  has_many :target_stats, :dependent => :destroy

  # Collects the statistics generated by the load generating cluster
  # @param [Hailstorm::Behavior::Clusterable] cluster_instance
  def collect_client_stats(cluster_instance)
    
    logger.debug { "#{self.class}.#{__method__}" }
    return if command.aborted?
        
    jmeter_plan_results_map = {}    
    cluster_instance.master_agents(:active => true).each do |agent|
      result_file_name =  agent.result_for(self, local_log_path)
      result_file_path = File.join(local_log_path, result_file_name)
      unless jmeter_plan_results_map.key?(agent.jmeter_plan_id)
        jmeter_plan_results_map[agent.jmeter_plan_id] = []
      end
      jmeter_plan_results_map[agent.jmeter_plan_id].push(result_file_path)
    end

    jmeter_plan_results_map.keys.sort.each do |jmeter_plan_id|

      Hailstorm::Model::ClientStat.create_client_stats(self, jmeter_plan_id,
        cluster_instance.slug, jmeter_plan_results_map[jmeter_plan_id])
        
    end  
  end
  
  # Collects the statistics generated at target_host
  # @param [Hailstorm::Model::TargetHost] target_host
  def collect_target_stats(target_host)
    
    logger.debug { "#{self.class}.#{__method__}" }
    return if command.aborted?
        
    # collect the remote logs
    log_file_names = target_host.download_remote_log(local_log_path)
    log_file_paths = nil
    unless log_file_names.nil?
      log_file_paths = log_file_names.collect {|n| File.join(local_log_path, n) }
    end

    Hailstorm::Model::TargetStat.create_target_stats(self, target_host, log_file_paths)
  end

  # @param [Hailstorm::Model::Project] project
  def self.create_report(project)

    reported_execution_cyles = self.execution_cycles_for_report(project)

    start_id = reported_execution_cyles.first.id
    end_id = reported_execution_cyles.last.id

    builder = Hailstorm::Support::ReportBuilder.new()
    builder.title = project.project_code.humanize

    reported_execution_cyles.each do |execution_cycle|
      builder.test_summary_rows do |row|
        row.started_at = execution_cycle.started_at
        row.completed_at = execution_cycle.completed_at
        row.total_threads_count = execution_cycle.total_threads_count
        row.target_hosts = execution_cycle.target_hosts
      end

      builder.execution_detail_items do |execution_item|
        execution_cycle.clusters.each do |cluster|

          execution_item.clusters do |cluster_item|
            cluster_item.name = cluster.slug

            cluster.client_stats.each do |client_stat|
              cluster_item.client_stats do |client_stat_item|
                client_stat_item.name = client_stat.jmeter_plan.plan_name
                client_stat_item.threads_count = client_stat.threads_count
                client_stat_item.aggregate_graph do |g|
                  g.image_path = client_stat.aggregate_graph()
                end
              end
            end
          end

          execution_cycle.target_stats.each do |target_stat|
            execution_item.target_stats do |target_stat_item|
              target_stat_item.role_name = target_stat.target_host.role_name
              target_stat_item.host_name = target_stat.target_host.host_name
              target_stat_item.utilization_graph do |g|
                g.image_path = target_stat.utilization_graph()
              end
            end
          end
        end
      end
    end

    # adding aggregate graphs over all reported_execution_cyles
    unless reported_execution_cyles.size == 1
      builder.client_comparison_graph do |graph|
        graph.image_path = Hailstorm::Model::ClientStat.execution_comparison_graph(
            reported_execution_cyles)
      end

      builder.target_cpu_comparison_graph do |graph|
        graph.image_path = Hailstorm::Model::TargetStat.cpu_comparison_graph(
            reported_execution_cyles)
      end
      builder.target_memory_comparison_graph do |graph|
        graph.image_path = Hailstorm::Model::TargetStat.memory_comparison_graph(
            reported_execution_cyles)
      end
    end

    reports_path = File.join(Hailstorm.root, Hailstorm.reports_dir)
    report_file_name = "#{project.project_code}-#{start_id}-#{end_id}" # minus extn

    builder.build(reports_path, report_file_name).tap do |path|
      if Hailstorm.application.command_processor.report_finalize?
        reported_execution_cyles.each do |execution_cycle|
          execution_cycle.update_column(:status, 'reported')
        end
      end
    end # returns path to generated file
  end

  def self.execution_cycles_for_report(project)
    project.execution_cycles.where(:status => :stopped).order(:created_at).all()
  end

  # @return [String] created_at in YYYY-MM-DD HH:MM:SS format
  def started_at
    self.created_at.strftime('%Y-%m-%d %H:%M:%S')
  end

  # @return [String] updated_at in YYYY-MM-DD HH:MM:SS format
  def completed_at
    self.updated_at.strftime('%Y-%m-%d %H:%M:%S')
  end

  # @return [Integer] sum of thread_counts in client_stats for this execution_cycle
  def total_threads_count
    @total_threads_count ||= self.client_stats().sum(:threads_count)
  end

  def target_hosts
    @target_hosts ||= self.target_stats.includes(:target_host).collect(&:target_host)
  end


  def clusters

    if @clusters.nil?
      @clusters = []
      clusterable_slugs = self.client_stats()
                              .select(:clusterable_slug)
                              .group(:clusterable_slug)
                              .order(:clusterable_slug)
                              .collect(&:clusterable_slug)
      clusterable_slugs.each do |slug|
        cluster = OpenStruct.new()
        cluster.slug = slug
        cluster.client_stats = self.client_stats
                                   .where(:clusterable_slug => slug)
                                   .includes(:jmeter_plan)
                                   .all()
        @clusters.push(cluster)
      end
    end

    @clusters
  end

  private
  
  def local_log_path
    @local_log_path ||= File.join(Hailstorm.root, Hailstorm.log_dir)
  end
  
  def command
    Hailstorm.application.command_processor
  end

  def reports_path
    File.join(Hailstorm.root, Hailstorm.reports_dir)
  end

end
