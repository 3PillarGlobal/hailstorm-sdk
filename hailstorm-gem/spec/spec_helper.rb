# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
require 'bundler'
Bundler.setup(:default, :test)
require 'simplecov'

$CLASSPATH << File.dirname(__FILE__)

require 'hailstorm/initializer/java_classpath'
require 'hailstorm/initializer/eager_load'
require 'hailstorm/support/configuration'
require 'hailstorm/support/schema'
require 'active_record/base'
require 'test_schema'
require 'hailstorm/support/thread'
require 'hailstorm/support/log4j_backed_logger'
require 'hailstorm/behavior/file_store'
require 'hailstorm/support/db_connection'

ENV['HAILSTORM_ENV'] = 'test' unless ENV['HAILSTORM_ENV']

# disable threading in unit tests
class Hailstorm::Support::Thread
  def self.start(*args)
    yield(*args)
  end
end

BUILD_PATH = File.join(File.expand_path('../..', __FILE__), 'build', 'spec').freeze
FileUtils.rm_rf(BUILD_PATH)
FileUtils.mkdir_p(BUILD_PATH)
ENV['HAILSTORM_WORKSPACE_ROOT'] = BUILD_PATH

RSpec.configure do |config|
  def logger
    @logger ||= Hailstorm::Support::Log4jBackedLogger.get_logger(RSpec)
  end

  config.raise_errors_for_deprecations!
  config.run_all_when_everything_filtered = true
  config.filter_run :focus
  config.add_setting(:build_path, default: BUILD_PATH)

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'

  config.mock_with(:rspec) do |mocks|
    mocks.yield_receiver_to_any_instance_implementation_blocks = false
    mocks.verify_partial_doubles = true
  end

  config.prepend_before(:suite) do
    connection_spec = {
      adapter: 'jdbcmysql',
      database: "hailstorm_#{ENV['HAILSTORM_ENV']}",
      username: 'hailstorm_dev',
      password: 'hailstorm_dev'
    }

    ActiveRecord::Base.logger = Hailstorm::Support::Log4jBackedLogger.get_logger(ActiveRecord::Base)
    Hailstorm::Support::DbConnection.establish!(connection_spec)
    Hailstorm::Support::Schema.create_schema
    at_exit do
      ActiveRecord::Base.connection.disconnect! if ActiveRecord::Base.connected?
    end
  end

  config.append_after(:suite) do
    ActiveRecord::Base.clear_all_connections!
  end

  # Runs each example in a DB transaction and rolls back the changes.
  config.around(:each) do |ex|
    txn = ActiveRecord::Base.connection.begin_transaction
    ex.run
    begin
      txn.rollback if ActiveRecord::Base.connected?
    rescue ActiveRecord::ConnectionNotEstablished
      # no op
    end
  end

  config.after(:each) do
    Hailstorm.fs = nil
  end
end
