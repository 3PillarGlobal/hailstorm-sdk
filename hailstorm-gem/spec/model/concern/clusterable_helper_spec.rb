require 'spec_helper'
require 'hailstorm/model/concern/clusterable_helper'
require 'hailstorm/model/amazon_cloud'

describe Hailstorm::Model::Concern::ClusterableHelper do
  # @param [Hailstorm::Model::AmazonCloud] aws
  def stub_aws!(aws)
    aws.stub!(:secure_identity_file)
    aws.stub!(:create_security_group)
  end

  before(:each) do
    @aws = Hailstorm::Model::AmazonCloud.new
  end

  context '#setup' do
    before(:each) do
      @aws.project = Hailstorm::Model::Project.where(project_code: 'amazon_cloud_spec').first_or_create!
      @aws.access_key = 'dummy'
      @aws.secret_key = 'dummy'
      @aws.region = 'ua-east-1'
      stub_aws!(@aws)
    end

    context '#active=true' do
      it 'should be persisted' do
        @aws.should_receive(:identity_file_exists)
        @aws.should_receive(:set_availability_zone)
        @aws.should_receive(:create_agent_ami)
        @aws.should_receive(:provision_agents)
        @aws.should_receive(:assign_vpc_subnet) { @aws.vpc_subnet_id = 'subnet-1234' }

        @aws.active = true
        @aws.setup
        expect(@aws).to be_persisted
      end

      context 'vpc_subnet_id is present' do
        it 'should not create new subnet' do
          @aws.vpc_subnet_id = 'subnet-1234'
          @aws.should_receive(:identity_file_exists)
          @aws.should_receive(:set_availability_zone)
          @aws.should_receive(:create_agent_ami)
          @aws.should_receive(:provision_agents)
          @aws.should_not_receive(:assign_vpc_subnet)

          @aws.active = true
          @aws.setup
        end
      end
    end

    context '#active=false' do
      it 'should be persisted' do
        @aws.should_not_receive(:identity_file_exists)
        @aws.should_not_receive(:set_availability_zone)
        @aws.should_not_receive(:create_agent_ami)
        @aws.should_not_receive(:provision_agents)
        @aws.should_not_receive(:secure_identity_file)
        @aws.should_not_receive(:assign_vpc_subnet)

        @aws.active = false
        @aws.setup
        expect(@aws).to be_persisted
      end
    end
  end

  context '#cleanup' do
    before(:each) do
      @aws.active = true
      @aws.autogenerated_ssh_key = true
      @aws.stub!(:identity_file_path).and_return('secure.pem')
      @aws.ssh_identity = 'secure'
      @mock_key_pair_client = mock(Hailstorm::Behavior::AwsAdaptable::KeyPairClient)
      @aws.stub!(:client_factory)
          .and_return(Hailstorm::Behavior::AwsAdaptable::ClientFactory.new(key_pair_client: @mock_key_pair_client))
    end

    context 'key_pair exists' do
      it 'should delete the key_pair' do
        @mock_key_pair_client.stub!(:find).and_return('key-pair-123')
        @mock_key_pair_client.should_receive(:delete).with(key_pair_id: 'key-pair-123')
        FileUtils.should_receive(:safe_unlink)
        @aws.cleanup
      end
    end

    context 'key_pair does not exist' do
      it 'should do nothing' do
        @mock_key_pair_client.stub!(:find).and_return(nil)
        @mock_key_pair_client.should_not_receive(:delete)
        FileUtils.should_not_receive(:safe_unlink)
        @aws.cleanup
      end
    end
  end

  context '#purge' do
    it 'should clean the regions with active Amazon Cloud clusters' do
      attrs = { access_key: 'foo-east-1', secret_key: 'bar-east-1', region: 'us-east-1', active: false }
      clusterable = Hailstorm::Model::AmazonCloud.new(attrs)
      clusterable.project = Hailstorm::Model::Project.new(project_code: Digest::SHA2.new.to_s[0..5])
      stub_aws!(clusterable)
      clusterable.save!
      clusterable.update_column(:active, true)

      mock_cleaner = mock(Hailstorm::Support::AmazonAccountCleaner)
      mock_cleaner.should_receive(:cleanup)
      clusterable.purge(mock_cleaner)
      expect(clusterable.agent_ami).to be_nil
    end
  end
end
